What is a module?

A module is just a file

A module is just a file. One script is one module. As simple as that.
Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:

export keyword labels variables and functions that should be accessible from outside the current module.
import allows the import of functionality from other modules.
==================================================================
export function sayHi(user) {
  alert(`Hello, ${user}!`);
}
==================================================================
import {sayHi} from './sayHi.js';

alert(sayHi); // function...
sayHi('John'); // Hello, John!
==================================================================

The import directive loads the module by path ./sayHi.js relative to the current file,
and assigns exported function sayHi to the corresponding variable.

As modules support special keywords and features, we must tell the browser that a script should be treated as a module, 
by using the attribute <script type="module">.

<!doctype html>
<script type="module">
  import {sayHi} from './say.js';

  document.body.innerHTML = sayHi('John');
</script>

=======================================
<!doctype html>
<script type="module">
  import {sayHi} from './say.js';

  document.body.innerHTML = sayHi('John');
</script>

==========================================
Modules work only via HTTP(s), not locally

Core module features
There are core features, valid both for browser and server-side JavaScript.

Always ‚Äúuse strict‚Äù
Modules always work in strict mode. E.g. assigning to an undeclared variable will give an error.

<script type="module">
  a = 5; // error
</script>
Module-level scope

Each module has its own top-level scope. In other words, top-level variables and functions from a module are not seen in other scripts.

Modules should export what they want to be accessible from outside and import what they need.

user.js should export the user variable.
hello.js should import it from user.js module.

If we talk about HTML pages, independent top-level scope also exists for each <script type="module">.
Here are two scripts on the same page, both type="module". They don‚Äôt see each other‚Äôs top-level variables:

A module code is evaluated only the first time when imported
=======================================================================
If the same module is imported into multiple other modules, 
its code is executed only once, upon the first import.
Then its exports are given to all further importers.

First, if executing a module code brings side-effects, like showing a message,
then importing it multiple times will trigger it only once ‚Äì the first time:

// üìÅ alert.js
alert("Module is evaluated!");

// Import the same module from different files

// üìÅ 1.js
import `./alert.js`; // Module is evaluated!

// üìÅ 2.js
import `./alert.js`; // (shows nothing)

Such behavior is actually very convenient, because it allows us to configure modules.
a module can provide a generic functionality that needs a setup. E.g. authentication needs credentials. 
Then it can export a configuration object expecting the outer code to assign to it.

A module exports some means of configuration, e.g. a configuration object.
On the first import we initialize it, write to its properties. The top-level application script may do that.
Further imports use the module.

For instance, the admin.js module may provide certain functionality (e.g. authentication), 
but expect the credentials to come into the config object from outside:

// üìÅ admin.js
export let config = { };

export function sayHi() {
  alert(`Ready to serve, ${config.user}!`);
}
Here, admin.js exports the config object (initially empty, but may have default properties too).

Then in init.js, the first script of our app, we import config from it and set config.user:

// üìÅ init.js
import {config} from './admin.js';
config.user = "Pete";


// üìÅ another.js
import {sayHi} from './admin.js';

sayHi(); // Ready to serve, Pete!

import.meta
==============================
The object import.meta contains the information about the current module.

















